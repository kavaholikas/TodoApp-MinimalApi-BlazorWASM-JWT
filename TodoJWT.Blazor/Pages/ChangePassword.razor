@page "/change-password"
@attribute [Authorize]
@inject AuthenticationStateProvider stateProvider
@inject ApiHandler ApiHandler

<div class="content">
    <AuthorizeView>
        <h1>Change Password</h1>
        <p>Username: @context.User.Identity.Name</p>

        <div>
            <div class="form-group">
                <label>Old Password</label>
                <input type="password" @bind="Password"/>
            </div>

            <div class="form-group">
                <label>New Password</label>
                <input type="password" @bind="NewPassword"/>
            </div>

            <div class="form-group">
                <label>Repeat New Password</label>
                <input type="password" @bind="NewRepeatPassword"/>
            </div>

            <button class="form-submit-button" type="submit" @onclick="OnSubmit">Login</button>
        </div>

        @if (!string.IsNullOrWhiteSpace(ApiCallSuccess))
        {
            <div>
                <h1 style="color: lightgreen">@ApiCallSuccess</h1>
            </div>
        }

        <div class="form-errors">
            <p>@ApiCallError</p>
            <p>@PasswordError</p>
            <p>@NewPasswordError</p>
            <p>@PasswordsDontMatchError</p>
        </div>

    </AuthorizeView>
</div>

@code {
    public string Password { get; set; } = string.Empty;
    public string NewPassword { get; set; } = string.Empty;
    public string NewRepeatPassword { get; set; } = string.Empty;

    public string ApiCallError = string.Empty;
    public string PasswordError = string.Empty;
    public string NewPasswordError = string.Empty;
    public string PasswordsDontMatchError = string.Empty;

    public string ApiCallSuccess = string.Empty;

    public async void OnSubmit()
    {
        ApiCallError = string.Empty;

        bool isPasswordValid = InputValidation.IsInputValid(Password, "Password", out PasswordError);
        bool isNewPasswordValid = InputValidation.IsInputValid(NewPassword, "New Password", out NewPasswordError);
        bool doesPasswordsMatch = NewPassword == NewRepeatPassword;

        if (!isPasswordValid || !isNewPasswordValid || !doesPasswordsMatch)
        {
            return;
        }

        var state = await stateProvider.GetAuthenticationStateAsync();


        ChangePasswordDto changePasswordModel = new ChangePasswordDto()
        {
            UserID = int.Parse(state.User.Claims.First(c => c.Type == "ID").Value),
            OldPassword = Password,
            NewPassword = NewPassword,
            RepeatPassword = NewRepeatPassword
        };

        ApiHandlerResponse response = await ApiHandler.ChangeUserPassword(changePasswordModel);

        if (response.Success)
        {
            ApiCallSuccess = "Password Changed!";

            Password = string.Empty;
            NewPassword = string.Empty;
            NewRepeatPassword = string.Empty;
        }
        else
        {
            ApiCallError = response.Message;
        }

        StateHasChanged();
    }
}
